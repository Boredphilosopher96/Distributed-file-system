#
# Autogenerated by Thrift Compiler (0.15.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys
import logging
from .ttypes import *
from thrift.Thrift import TProcessor
from thrift.transport import TTransport
all_structs = []


class Iface(object):
    def get_file_version(self, file_name):
        """
        Parameters:
         - file_name

        """
        pass

    def append_to_specific_file(self, file_name, update, version_number):
        """
        Parameters:
         - file_name
         - update
         - version_number

        """
        pass

    def update_file_to_text(self, file_name, new_file, version_number):
        """
        Parameters:
         - file_name
         - new_file
         - version_number

        """
        pass

    def forwarded_read_from_file(self, file_name, node_to_exclude):
        """
        Parameters:
         - file_name
         - node_to_exclude

        """
        pass

    def read_file_from_node(self, file_name):
        """
        Parameters:
         - file_name

        """
        pass

    def forwarded_write_to_file(self, file_name, update, node_to_exclude):
        """
        Parameters:
         - file_name
         - update
         - node_to_exclude

        """
        pass


class Client(Iface):
    def __init__(self, iprot, oprot=None):
        self._iprot = self._oprot = iprot
        if oprot is not None:
            self._oprot = oprot
        self._seqid = 0

    def get_file_version(self, file_name):
        """
        Parameters:
         - file_name

        """
        self.send_get_file_version(file_name)
        return self.recv_get_file_version()

    def send_get_file_version(self, file_name):
        self._oprot.writeMessageBegin('get_file_version', TMessageType.CALL, self._seqid)
        args = get_file_version_args()
        args.file_name = file_name
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_get_file_version(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = get_file_version_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.custom_exception is not None:
            raise result.custom_exception
        raise TApplicationException(TApplicationException.MISSING_RESULT, "get_file_version failed: unknown result")

    def append_to_specific_file(self, file_name, update, version_number):
        """
        Parameters:
         - file_name
         - update
         - version_number

        """
        self.send_append_to_specific_file(file_name, update, version_number)
        return self.recv_append_to_specific_file()

    def send_append_to_specific_file(self, file_name, update, version_number):
        self._oprot.writeMessageBegin('append_to_specific_file', TMessageType.CALL, self._seqid)
        args = append_to_specific_file_args()
        args.file_name = file_name
        args.update = update
        args.version_number = version_number
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_append_to_specific_file(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = append_to_specific_file_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.custom_exception is not None:
            raise result.custom_exception
        raise TApplicationException(TApplicationException.MISSING_RESULT, "append_to_specific_file failed: unknown result")

    def update_file_to_text(self, file_name, new_file, version_number):
        """
        Parameters:
         - file_name
         - new_file
         - version_number

        """
        self.send_update_file_to_text(file_name, new_file, version_number)
        return self.recv_update_file_to_text()

    def send_update_file_to_text(self, file_name, new_file, version_number):
        self._oprot.writeMessageBegin('update_file_to_text', TMessageType.CALL, self._seqid)
        args = update_file_to_text_args()
        args.file_name = file_name
        args.new_file = new_file
        args.version_number = version_number
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_update_file_to_text(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = update_file_to_text_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.custom_exception is not None:
            raise result.custom_exception
        raise TApplicationException(TApplicationException.MISSING_RESULT, "update_file_to_text failed: unknown result")

    def forwarded_read_from_file(self, file_name, node_to_exclude):
        """
        Parameters:
         - file_name
         - node_to_exclude

        """
        self.send_forwarded_read_from_file(file_name, node_to_exclude)
        return self.recv_forwarded_read_from_file()

    def send_forwarded_read_from_file(self, file_name, node_to_exclude):
        self._oprot.writeMessageBegin('forwarded_read_from_file', TMessageType.CALL, self._seqid)
        args = forwarded_read_from_file_args()
        args.file_name = file_name
        args.node_to_exclude = node_to_exclude
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_forwarded_read_from_file(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = forwarded_read_from_file_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.custom_exception is not None:
            raise result.custom_exception
        raise TApplicationException(TApplicationException.MISSING_RESULT, "forwarded_read_from_file failed: unknown result")

    def read_file_from_node(self, file_name):
        """
        Parameters:
         - file_name

        """
        self.send_read_file_from_node(file_name)
        return self.recv_read_file_from_node()

    def send_read_file_from_node(self, file_name):
        self._oprot.writeMessageBegin('read_file_from_node', TMessageType.CALL, self._seqid)
        args = read_file_from_node_args()
        args.file_name = file_name
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_read_file_from_node(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = read_file_from_node_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.custom_exception is not None:
            raise result.custom_exception
        raise TApplicationException(TApplicationException.MISSING_RESULT, "read_file_from_node failed: unknown result")

    def forwarded_write_to_file(self, file_name, update, node_to_exclude):
        """
        Parameters:
         - file_name
         - update
         - node_to_exclude

        """
        self.send_forwarded_write_to_file(file_name, update, node_to_exclude)
        return self.recv_forwarded_write_to_file()

    def send_forwarded_write_to_file(self, file_name, update, node_to_exclude):
        self._oprot.writeMessageBegin('forwarded_write_to_file', TMessageType.CALL, self._seqid)
        args = forwarded_write_to_file_args()
        args.file_name = file_name
        args.update = update
        args.node_to_exclude = node_to_exclude
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_forwarded_write_to_file(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = forwarded_write_to_file_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.custom_exception is not None:
            raise result.custom_exception
        raise TApplicationException(TApplicationException.MISSING_RESULT, "forwarded_write_to_file failed: unknown result")


class Processor(Iface, TProcessor):
    def __init__(self, handler):
        self._handler = handler
        self._processMap = {}
        self._processMap["get_file_version"] = Processor.process_get_file_version
        self._processMap["append_to_specific_file"] = Processor.process_append_to_specific_file
        self._processMap["update_file_to_text"] = Processor.process_update_file_to_text
        self._processMap["forwarded_read_from_file"] = Processor.process_forwarded_read_from_file
        self._processMap["read_file_from_node"] = Processor.process_read_file_from_node
        self._processMap["forwarded_write_to_file"] = Processor.process_forwarded_write_to_file
        self._on_message_begin = None

    def on_message_begin(self, func):
        self._on_message_begin = func

    def process(self, iprot, oprot):
        (name, type, seqid) = iprot.readMessageBegin()
        if self._on_message_begin:
            self._on_message_begin(name, type, seqid)
        if name not in self._processMap:
            iprot.skip(TType.STRUCT)
            iprot.readMessageEnd()
            x = TApplicationException(TApplicationException.UNKNOWN_METHOD, 'Unknown function %s' % (name))
            oprot.writeMessageBegin(name, TMessageType.EXCEPTION, seqid)
            x.write(oprot)
            oprot.writeMessageEnd()
            oprot.trans.flush()
            return
        else:
            self._processMap[name](self, seqid, iprot, oprot)
        return True

    def process_get_file_version(self, seqid, iprot, oprot):
        args = get_file_version_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = get_file_version_result()
        try:
            result.success = self._handler.get_file_version(args.file_name)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except CustomException as custom_exception:
            msg_type = TMessageType.REPLY
            result.custom_exception = custom_exception
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("get_file_version", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_append_to_specific_file(self, seqid, iprot, oprot):
        args = append_to_specific_file_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = append_to_specific_file_result()
        try:
            result.success = self._handler.append_to_specific_file(args.file_name, args.update, args.version_number)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except CustomException as custom_exception:
            msg_type = TMessageType.REPLY
            result.custom_exception = custom_exception
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("append_to_specific_file", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_update_file_to_text(self, seqid, iprot, oprot):
        args = update_file_to_text_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = update_file_to_text_result()
        try:
            result.success = self._handler.update_file_to_text(args.file_name, args.new_file, args.version_number)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except CustomException as custom_exception:
            msg_type = TMessageType.REPLY
            result.custom_exception = custom_exception
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("update_file_to_text", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_forwarded_read_from_file(self, seqid, iprot, oprot):
        args = forwarded_read_from_file_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = forwarded_read_from_file_result()
        try:
            result.success = self._handler.forwarded_read_from_file(args.file_name, args.node_to_exclude)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except CustomException as custom_exception:
            msg_type = TMessageType.REPLY
            result.custom_exception = custom_exception
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("forwarded_read_from_file", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_read_file_from_node(self, seqid, iprot, oprot):
        args = read_file_from_node_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = read_file_from_node_result()
        try:
            result.success = self._handler.read_file_from_node(args.file_name)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except CustomException as custom_exception:
            msg_type = TMessageType.REPLY
            result.custom_exception = custom_exception
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("read_file_from_node", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_forwarded_write_to_file(self, seqid, iprot, oprot):
        args = forwarded_write_to_file_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = forwarded_write_to_file_result()
        try:
            result.success = self._handler.forwarded_write_to_file(args.file_name, args.update, args.node_to_exclude)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except CustomException as custom_exception:
            msg_type = TMessageType.REPLY
            result.custom_exception = custom_exception
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("forwarded_write_to_file", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

# HELPER FUNCTIONS AND STRUCTURES


class get_file_version_args(object):
    """
    Attributes:
     - file_name

    """


    def __init__(self, file_name=None,):
        self.file_name = file_name

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.file_name = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('get_file_version_args')
        if self.file_name is not None:
            oprot.writeFieldBegin('file_name', TType.STRING, 1)
            oprot.writeString(self.file_name.encode('utf-8') if sys.version_info[0] == 2 else self.file_name)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(get_file_version_args)
get_file_version_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'file_name', 'UTF8', None, ),  # 1
)


class get_file_version_result(object):
    """
    Attributes:
     - success
     - custom_exception

    """


    def __init__(self, success=None, custom_exception=None,):
        self.success = success
        self.custom_exception = custom_exception

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I32:
                    self.success = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.custom_exception = CustomException.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('get_file_version_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I32, 0)
            oprot.writeI32(self.success)
            oprot.writeFieldEnd()
        if self.custom_exception is not None:
            oprot.writeFieldBegin('custom_exception', TType.STRUCT, 1)
            self.custom_exception.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(get_file_version_result)
get_file_version_result.thrift_spec = (
    (0, TType.I32, 'success', None, None, ),  # 0
    (1, TType.STRUCT, 'custom_exception', [CustomException, None], None, ),  # 1
)


class append_to_specific_file_args(object):
    """
    Attributes:
     - file_name
     - update
     - version_number

    """


    def __init__(self, file_name=None, update=None, version_number=None,):
        self.file_name = file_name
        self.update = update
        self.version_number = version_number

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.file_name = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.update = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.version_number = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('append_to_specific_file_args')
        if self.file_name is not None:
            oprot.writeFieldBegin('file_name', TType.STRING, 1)
            oprot.writeString(self.file_name.encode('utf-8') if sys.version_info[0] == 2 else self.file_name)
            oprot.writeFieldEnd()
        if self.update is not None:
            oprot.writeFieldBegin('update', TType.STRING, 2)
            oprot.writeString(self.update.encode('utf-8') if sys.version_info[0] == 2 else self.update)
            oprot.writeFieldEnd()
        if self.version_number is not None:
            oprot.writeFieldBegin('version_number', TType.I32, 3)
            oprot.writeI32(self.version_number)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(append_to_specific_file_args)
append_to_specific_file_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'file_name', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'update', 'UTF8', None, ),  # 2
    (3, TType.I32, 'version_number', None, None, ),  # 3
)


class append_to_specific_file_result(object):
    """
    Attributes:
     - success
     - custom_exception

    """


    def __init__(self, success=None, custom_exception=None,):
        self.success = success
        self.custom_exception = custom_exception

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRING:
                    self.success = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.custom_exception = CustomException.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('append_to_specific_file_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRING, 0)
            oprot.writeString(self.success.encode('utf-8') if sys.version_info[0] == 2 else self.success)
            oprot.writeFieldEnd()
        if self.custom_exception is not None:
            oprot.writeFieldBegin('custom_exception', TType.STRUCT, 1)
            self.custom_exception.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(append_to_specific_file_result)
append_to_specific_file_result.thrift_spec = (
    (0, TType.STRING, 'success', 'UTF8', None, ),  # 0
    (1, TType.STRUCT, 'custom_exception', [CustomException, None], None, ),  # 1
)


class update_file_to_text_args(object):
    """
    Attributes:
     - file_name
     - new_file
     - version_number

    """


    def __init__(self, file_name=None, new_file=None, version_number=None,):
        self.file_name = file_name
        self.new_file = new_file
        self.version_number = version_number

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.file_name = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.new_file = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.version_number = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('update_file_to_text_args')
        if self.file_name is not None:
            oprot.writeFieldBegin('file_name', TType.STRING, 1)
            oprot.writeString(self.file_name.encode('utf-8') if sys.version_info[0] == 2 else self.file_name)
            oprot.writeFieldEnd()
        if self.new_file is not None:
            oprot.writeFieldBegin('new_file', TType.STRING, 2)
            oprot.writeString(self.new_file.encode('utf-8') if sys.version_info[0] == 2 else self.new_file)
            oprot.writeFieldEnd()
        if self.version_number is not None:
            oprot.writeFieldBegin('version_number', TType.I32, 3)
            oprot.writeI32(self.version_number)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(update_file_to_text_args)
update_file_to_text_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'file_name', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'new_file', 'UTF8', None, ),  # 2
    (3, TType.I32, 'version_number', None, None, ),  # 3
)


class update_file_to_text_result(object):
    """
    Attributes:
     - success
     - custom_exception

    """


    def __init__(self, success=None, custom_exception=None,):
        self.success = success
        self.custom_exception = custom_exception

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRING:
                    self.success = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.custom_exception = CustomException.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('update_file_to_text_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRING, 0)
            oprot.writeString(self.success.encode('utf-8') if sys.version_info[0] == 2 else self.success)
            oprot.writeFieldEnd()
        if self.custom_exception is not None:
            oprot.writeFieldBegin('custom_exception', TType.STRUCT, 1)
            self.custom_exception.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(update_file_to_text_result)
update_file_to_text_result.thrift_spec = (
    (0, TType.STRING, 'success', 'UTF8', None, ),  # 0
    (1, TType.STRUCT, 'custom_exception', [CustomException, None], None, ),  # 1
)


class forwarded_read_from_file_args(object):
    """
    Attributes:
     - file_name
     - node_to_exclude

    """


    def __init__(self, file_name=None, node_to_exclude=None,):
        self.file_name = file_name
        self.node_to_exclude = node_to_exclude

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.file_name = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.node_to_exclude = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('forwarded_read_from_file_args')
        if self.file_name is not None:
            oprot.writeFieldBegin('file_name', TType.STRING, 1)
            oprot.writeString(self.file_name.encode('utf-8') if sys.version_info[0] == 2 else self.file_name)
            oprot.writeFieldEnd()
        if self.node_to_exclude is not None:
            oprot.writeFieldBegin('node_to_exclude', TType.STRING, 2)
            oprot.writeString(self.node_to_exclude.encode('utf-8') if sys.version_info[0] == 2 else self.node_to_exclude)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(forwarded_read_from_file_args)
forwarded_read_from_file_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'file_name', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'node_to_exclude', 'UTF8', None, ),  # 2
)


class forwarded_read_from_file_result(object):
    """
    Attributes:
     - success
     - custom_exception

    """


    def __init__(self, success=None, custom_exception=None,):
        self.success = success
        self.custom_exception = custom_exception

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRING:
                    self.success = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.custom_exception = CustomException.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('forwarded_read_from_file_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRING, 0)
            oprot.writeString(self.success.encode('utf-8') if sys.version_info[0] == 2 else self.success)
            oprot.writeFieldEnd()
        if self.custom_exception is not None:
            oprot.writeFieldBegin('custom_exception', TType.STRUCT, 1)
            self.custom_exception.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(forwarded_read_from_file_result)
forwarded_read_from_file_result.thrift_spec = (
    (0, TType.STRING, 'success', 'UTF8', None, ),  # 0
    (1, TType.STRUCT, 'custom_exception', [CustomException, None], None, ),  # 1
)


class read_file_from_node_args(object):
    """
    Attributes:
     - file_name

    """


    def __init__(self, file_name=None,):
        self.file_name = file_name

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.file_name = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('read_file_from_node_args')
        if self.file_name is not None:
            oprot.writeFieldBegin('file_name', TType.STRING, 1)
            oprot.writeString(self.file_name.encode('utf-8') if sys.version_info[0] == 2 else self.file_name)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(read_file_from_node_args)
read_file_from_node_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'file_name', 'UTF8', None, ),  # 1
)


class read_file_from_node_result(object):
    """
    Attributes:
     - success
     - custom_exception

    """


    def __init__(self, success=None, custom_exception=None,):
        self.success = success
        self.custom_exception = custom_exception

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRING:
                    self.success = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.custom_exception = CustomException.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('read_file_from_node_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRING, 0)
            oprot.writeString(self.success.encode('utf-8') if sys.version_info[0] == 2 else self.success)
            oprot.writeFieldEnd()
        if self.custom_exception is not None:
            oprot.writeFieldBegin('custom_exception', TType.STRUCT, 1)
            self.custom_exception.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(read_file_from_node_result)
read_file_from_node_result.thrift_spec = (
    (0, TType.STRING, 'success', 'UTF8', None, ),  # 0
    (1, TType.STRUCT, 'custom_exception', [CustomException, None], None, ),  # 1
)


class forwarded_write_to_file_args(object):
    """
    Attributes:
     - file_name
     - update
     - node_to_exclude

    """


    def __init__(self, file_name=None, update=None, node_to_exclude=None,):
        self.file_name = file_name
        self.update = update
        self.node_to_exclude = node_to_exclude

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.file_name = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.update = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.node_to_exclude = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('forwarded_write_to_file_args')
        if self.file_name is not None:
            oprot.writeFieldBegin('file_name', TType.STRING, 1)
            oprot.writeString(self.file_name.encode('utf-8') if sys.version_info[0] == 2 else self.file_name)
            oprot.writeFieldEnd()
        if self.update is not None:
            oprot.writeFieldBegin('update', TType.STRING, 2)
            oprot.writeString(self.update.encode('utf-8') if sys.version_info[0] == 2 else self.update)
            oprot.writeFieldEnd()
        if self.node_to_exclude is not None:
            oprot.writeFieldBegin('node_to_exclude', TType.STRING, 3)
            oprot.writeString(self.node_to_exclude.encode('utf-8') if sys.version_info[0] == 2 else self.node_to_exclude)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(forwarded_write_to_file_args)
forwarded_write_to_file_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'file_name', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'update', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'node_to_exclude', 'UTF8', None, ),  # 3
)


class forwarded_write_to_file_result(object):
    """
    Attributes:
     - success
     - custom_exception

    """


    def __init__(self, success=None, custom_exception=None,):
        self.success = success
        self.custom_exception = custom_exception

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRING:
                    self.success = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.custom_exception = CustomException.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('forwarded_write_to_file_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRING, 0)
            oprot.writeString(self.success.encode('utf-8') if sys.version_info[0] == 2 else self.success)
            oprot.writeFieldEnd()
        if self.custom_exception is not None:
            oprot.writeFieldBegin('custom_exception', TType.STRUCT, 1)
            self.custom_exception.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(forwarded_write_to_file_result)
forwarded_write_to_file_result.thrift_spec = (
    (0, TType.STRING, 'success', 'UTF8', None, ),  # 0
    (1, TType.STRUCT, 'custom_exception', [CustomException, None], None, ),  # 1
)
fix_spec(all_structs)
del all_structs
